

$ mkdir learngit

$ cd learngit

$ pwd					//pwd命令用于显示当前目录

$ git init 				//把这个目录变成Git可以管理的仓库：

$ git add readme.txt  	//使用命令git add <file>，注意，可反复多次使用，添加多个文件；

$ git commit -m "wrote a readme file"

$ git status      		//命令可以让我们时刻掌握仓库当前的状态

$ git diff readme.txt 	//查看修改内容

$ git diff HEAD -- readme.txt//可以查看工作区和版本库里面最新版本的区别

$ git log				//显示从最近到最远的提交日志

$ git log --pretty=oneline 

$ git log --graph --pretty=oneline --abbrev-commit //看到分支的合并情况,可以看到分支合并图

$ git reset --hard HEAD^	//用HEAD表示当前版本,上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

$ git reset --hard 3628164

$ git reset HEAD readme.txt   //把暂存区的修改撤销掉（unstage），重新放回工作区
							
								git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区

								场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

								场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。


$ git reflog				//用来记录你的每一次命令, 查看命令历史，以便确定要回到未来的哪个版本

$ cat readme.txt 			//看readme.txt的文件内容：

$ git checkout -- readme.txt //把readme.txt文件在工作区的修改全部撤销,这里有两种情况：

								一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

								一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

								总之，就是让这个文件回到最近一次git commit或git add时的状态。

$ rm test.txt

$ git rm test.txt

$ git commit -m "remove test.txt"


$ ssh-keygen -t rsa -C "youremail@example.com" 
							//创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件


$ git remote add origin git@github.com:michaelliao/learngit.git //关联一个远程库

$ git push -u origin master   //把本地库的所有内容推送到远程库上 加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

$ git push origin master	//把本地master分支的最新修改推送至GitHub

$ git clone git@github.com:michaelliao/gitskills.git //克隆一个仓库

$ git checkout -b dev		//创建dev分支，然后切换到dev分支 相当于以下两条命令：

$ git branch dev

$ git checkout dev

$ git branch				//查看当前分支,当前分支前面会标一个*号

$ git branch -d dev			//删除dev分支

$ git merge dev				//把dev分支的工作成果合并到master分支上

$ git stash					//把当前工作现场“储藏”起来，等以后恢复现场后继续工作

$ git stash list

$ git stash pop				//恢复的同时把stash内容也删了

$ git branch -D feature-vulcan	//丢弃一个没有被合并过的分支

$ git remote				//查看远程库的信息

$ git remote -v              //显示更详细的信息

$ git push origin master	//把该分支上的所有本地提交推送到远程库

$ git checkout -b branch-name origin/branch-name //在本地创建和远程分支对应的分支，本地和远程分支的名称最好一致

$ git pull					//从远程抓取分支，使用

$ git tag v1.0				//打一个新标签

$ git tag 					//查看所有标签

$ git tag v0.9 6224937		//提交打标签，它对应的commit id

$ git tag -a v0.1 -m "version 0.1 released" 3628164 //创建带有说明的标签，用-a指定标签名，-m指定说明文字

$ git show <tagname>			//查看标签信息

$ git push origin v1.0		//推送某个标签到远程

$ git push origin --tags	//一次性推送全部尚未推送到远程的本地标签

$ git tag -d v0.1			//删除本地tag

$ git push origin :refs/tags/v0.9    //从远程删除tag

